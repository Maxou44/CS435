/**
  ******************************************************************************
  * @file    stm32xx_timerserver.h
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    01-October-2014
  * @brief   Header for stm32xx_timerserver.c module
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __STM32XX_TIMERSERVER_H
#define __STM32XX_TIMERSERVER_H

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32xx_timerserver_conf.h"

/** @addtogroup Middlewares
 *  @{
 */

/** @addtogroup ST
 *  @{
 */
 
/** @addtogroup TimerServer
 *  @{
 */

/** @addtogroup STM32XX_TIMERSERVER 
 * @{
 */
 
/** @defgroup STM32XX_TIMERSERVER_Exported_Types
  * @{
  */
/* Exported types ------------------------------------------------------------*/
typedef enum
{
  eTimerMode_SingleShot,
  eTimerMode_Repeated
} eTIMER_TimerMode_t;

typedef enum
{
  eTimerModuleID_BlueNRG_Profile_App,
  eTimerModuleID_BlueNRG_Profile,
  eTimerModuleID_BlueNRG_HCI,
  eTimerModuleID_Interrupt
} eTimerProcessID_t;

typedef enum{
  eTimerID_Successful,
  eTimerID_Failed,
} eReturnStatus_t;

typedef void (*pf_TIMER_TimerCallBack_t)(void);

/**
 * @}
 */

/** @defgroup STM32XX_TIMERSERVER_Exported_Constants
  * @{
  */
/* Exported constants --------------------------------------------------------*/

 /**
  * This value shall reflect the maximum delay there could be in the application between
  * the time the RTC interrupt is generated by the Hardware and the time when the
  * RTC interrupt handler is called
  * This time is measured in number of RTC_SYNCH_PRESCALER ticks
  *
  * A relax timing would be 1ms
  */
#define RTC_HANDLER_MAX_DELAY	APP_RTC_HANDLER_MAX_DELAY	/**< 1ms x 37Khz / (RTC_ASYNCH_PRESCALER+1) */

/**
 * Number of maximum concurrent virtual timers used by the application
 */
#define	MAX_NBR_CONCURRENT_TIMER	8

 /**
  * Preempt priority
  * Priority of the RTC Wakeup interrupt
  */
#define	NVIC_UART_RTC_WAKEUP_IT_PREEMPTPRIORITY		3

 /**
  * Sub priority
  * Priority of the RTC Wakeup interrupt
  */
#define	NVIC_UART_RTC_WAKEUP_IT_SUBPRIORITY		0

 /**
  * Interrupt ID in the NVIC of the RTC Wakeup interrupt handler
  * It shall be type of IRQn_Type
  */
#if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F030xC) || defined (STM32F031x6) ||\
    defined (STM32F038xx) || defined (STM32F042x6) || defined (STM32F048xx) || defined (STM32F051x8) ||\
    defined (STM32F058xx) || defined (STM32F070x6) || defined (STM32F070xB) || defined (STM32F071xB) ||\
    defined (STM32F072xB) || defined (STM32F078xx) || defined (STM32F091xC) || defined (STM32F098xx) 
  #define NVIC_RTC_WAKEUP_HANDLER_ID  RTC_IRQn
#endif       

#if defined (STM32F100xB) || defined (STM32F100xE) || defined (STM32F101x6) || defined (STM32F101xB) ||\
    defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F102x6) || defined (STM32F102xB) ||\
    defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) ||\
    defined (STM32F105xC) || defined (STM32F107xC)
  #define NVIC_RTC_WAKEUP_HANDLER_ID  RTC_IRQn
#endif

#if defined (STM32F205xx) || defined (STM32F215xx) || defined (STM32F207xx) || defined (STM32F217xx)
  #define NVIC_RTC_WAKEUP_HANDLER_ID  RTC_WKUP_IRQn
#endif

#if defined (STM32F301x8) || defined (STM32F302x8) || defined (STM32F302xC) || defined (STM32F302xE) ||\
    defined (STM32F303x8) || defined (STM32F303xC) || defined (STM32F303xE) || defined (STM32F318xx) ||\
    defined (STM32F328xx) || defined (STM32F334x8) || defined (STM32F358xx) || defined (STM32F373xC) ||\
    defined (STM32F378xx) || defined (STM32F398xx)     
  #define NVIC_RTC_WAKEUP_HANDLER_ID  RTC_WKUP_IRQn
#endif
      
#if defined (STM32F401xC) || defined (STM32F401xE) || defined (STM32F405xx) || defined (STM32F407xx) ||\
    defined (STM32F410Cx) || defined (STM32F410Rx) || defined (STM32F410Tx) || defined (STM32F411xE) ||\
    defined (STM32F412Cx) || defined (STM32F412Rx) || defined (STM32F412Vx) || defined (STM32F412Zx) ||\
    defined (STM32F413xx) || defined (STM32F415xx) || defined (STM32F417xx) || defined (STM32F423xx) ||\
    defined (STM32F427xx) || defined (STM32F429xx) || defined (STM32F437xx) || defined (STM32F439xx) ||\
    defined (STM32F446xx) || defined (STM32F469xx) || defined (STM32F479xx)
  #define NVIC_RTC_WAKEUP_HANDLER_ID  RTC_WKUP_IRQn
#endif

#if defined (STM32F756xx) || defined (STM32F746xx) || defined (STM32F745xx) || defined (STM32F767xx) ||\
    defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F722xx) ||\
	defined (STM32F723xx) || defined (STM32F732xx) || defined (STM32F733xx)
  #define NVIC_RTC_WAKEUP_HANDLER_ID  RTC_WKUP_IRQn
#endif	
	
#if defined (STM32L011xx) || defined (STM32L021xx) || defined (STM32L031xx) || defined (STM32L041xx) ||\
    defined (STM32L051xx) || defined (STM32L052xx) || defined (STM32L053xx) || defined (STM32L061xx) ||\
    defined (STM32L062xx) || defined (STM32L063xx) || defined (STM32L071xx) || defined (STM32L072xx) ||\
    defined (STM32L073xx) || defined (STM32L081xx) || defined (STM32L082xx) || defined (STM32L083xx)
  #define NVIC_RTC_WAKEUP_HANDLER_ID  RTC_IRQn
#endif  
      
#if defined (STM32L100xB)  || defined (STM32L100xBA) || defined (STM32L100xC)  || defined (STM32L151xB)  ||\
    defined (STM32L151xBA) || defined (STM32L151xC)  || defined (STM32L151xCA) || defined (STM32L151xD)  ||\
    defined (STM32L151xDX) || defined (STM32L151xE)  || defined (STM32L152xB)  || defined (STM32L152xBA) ||\
    defined (STM32L152xC)  || defined (STM32L152xCA) || defined (STM32L152xD)  || defined (STM32L152xDX) ||\
    defined (STM32L152xE)  || defined (STM32L162xC)  || defined (STM32L162xCA) || defined (STM32L162xD)  ||\
    defined (STM32L162xDX) || defined (STM32L162xE)
  #define NVIC_RTC_WAKEUP_HANDLER_ID  RTC_WKUP_IRQn
#endif
      
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) ||\
    defined (STM32L443xx) || defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) ||\
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) ||\
    defined (STM32L486xx)
  #define NVIC_RTC_WAKEUP_HANDLER_ID  RTC_WKUP_IRQn
#endif

 /**
  *  Define a critical section in the Timer server
  *  The Timer server does not support the API to be nested
  *  The  Application shall either:
  *  	a) Ensure this will never happen
  *  	b) Define the critical section
  *  The default implementations is masking all interrupts using the PRIMASK bit
  *  When the application is implementing low latency interrupts that would not support to be masked out,
  *  the critical section may use the basepri_max register to mask out only interrupt that have lower priority than those interrupts
  *  In that case, the application shall not call the Timer interface within these interrupt handlers.
  */
#define TIMER_USE_PRIMASK_AS_CRITICAL_SECTION

/**
 * @}
 */

/* Exported macros -----------------------------------------------------------*/

/** @defgroup STM32XX_TIMERSERVER_Exported_Functions
  * @{
  */
/* Exported functions ------------------------------------------------------- */
 void TIMER_Init(RTC_HandleTypeDef *hrtc);
 eReturnStatus_t TIMER_Create(eTimerProcessID_t eTimerProcessID, uint8_t *pTimerId, eTIMER_TimerMode_t eTimerMode, pf_TIMER_TimerCallBack_t pfTimerCallBack);
 void TIMER_Stop(uint8_t ubTimerID);
 void TIMER_Start(uint8_t ubTimerID, uint32_t timeout_ticks);
 void TIMER_Delete(uint8_t ubTimerID);
 void TIMER_Notification(eTimerProcessID_t eTimerProcessID, uint8_t ubTimerID, pf_TIMER_TimerCallBack_t pfTimerCallBack);
 void TIMER_RTC_Wakeup_Handler(void);

/**
 * @}
 */
 
/**
 * @}
 */
 
/**
 * @}
 */
 
/**
 * @}
 */
 
/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif /*__STM32XX_TIMERSERVER_H */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
